/* Generated by restful-react */

import * as React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export type Image = Entity & {imageUrl?: string};

export interface Entity {id: number}

export type Make = Entity & {name?: string; yearFounded?: string};

export type Model = Entity & {name?: string; productionYearFrom?: string; productionYearTo?: string; makeId: number; make?: Make};

export type PartClass = Entity & {name?: string};

export type Part = Entity & {name?: string; productionYearStart?: string; productionYearEnd?: string; manufacturer?: string; qualityGrade: number; price: number; priceUnits?: string; partNumber?: string; partClassId: number; imageId: number; trimId: number; buyerId: number; sellerId: number; buyer?: UserData; image?: Image; partClass?: PartClass; seller?: UserData; trim?: Trim};

export type UserData = Entity & {username?: string; passwordSalt?: string; passwordHash?: string; reputation?: number; email?: string; contactPhone?: string};

export type Trim = Entity & {name?: string; productionYearFrom?: string; productionYearTo?: string; modelId: number; model?: Model};

export type SpecificationValue = Entity & {name?: string; value: number; units?: string; partId: number; part?: Part};

export interface UserInfoModel {username?: string; reputation?: number; email?: string; contactPhone?: string}

export interface TokenModel {token?: string}

export interface LoginModel {username: string; password: string}

export type ImageGetAllProps = Omit<GetProps<Image[], unknown, void>, "path">;


export const ImageGetAll = (props: ImageGetAllProps) => (
  <Get<Image[], unknown, void>
    path={`/api/Image`}
    {...props}
  />
);

export type UseImageGetAllProps = Omit<UseGetProps<Image[], void>, "path">;


export const useImageGetAll = (props: UseImageGetAllProps) => useGet<Image[], unknown, void>(`/api/Image`, props);


export type ImagePostProps = Omit<MutateProps<Image, unknown, void, Image>, "path" | "verb">;


export const ImagePost = (props: ImagePostProps) => (
  <Mutate<Image, unknown, void, Image>
    verb="POST"
    path={`/api/Image`}
    {...props}
  />
);

export type UseImagePostProps = Omit<UseMutateProps<Image, void, Image>, "path" | "verb">;


export const useImagePost = (props: UseImagePostProps) => useMutate<Image, unknown, void, Image>("POST", `/api/Image`, props);


export type ImageGetProps = Omit<GetProps<Image, unknown, void>, "path"> & {id: number};


export const ImageGet = ({id, ...props}: ImageGetProps) => (
  <Get<Image, unknown, void>
    path={`/api/Image/${id}`}
    {...props}
  />
);

export type UseImageGetProps = Omit<UseGetProps<Image, void>, "path"> & {id: number};


export const useImageGet = ({id, ...props}: UseImageGetProps) => useGet<Image, unknown, void>(`/api/Image/${id}`, props);


export type ImagePutProps = Omit<MutateProps<Image, unknown, void, Image>, "path" | "verb"> & {id: number};


export const ImagePut = ({id, ...props}: ImagePutProps) => (
  <Mutate<Image, unknown, void, Image>
    verb="PUT"
    path={`/api/Image/${id}`}
    {...props}
  />
);

export type UseImagePutProps = Omit<UseMutateProps<Image, void, Image>, "path" | "verb"> & {id: number};


export const useImagePut = ({id, ...props}: UseImagePutProps) => useMutate<Image, unknown, void, Image>("PUT", `/api/Image/${id}`, props);


export type ImageDeleteProps = Omit<MutateProps<Image, unknown, void, string>, "path" | "verb">;


export const ImageDelete = (props: ImageDeleteProps) => (
  <Mutate<Image, unknown, void, string>
    verb="DELETE"
    path={`/api/Image`}
    {...props}
  />
);

export type UseImageDeleteProps = Omit<UseMutateProps<Image, void, string>, "path" | "verb">;


export const useImageDelete = (props: UseImageDeleteProps) => useMutate<Image, unknown, void, string>("DELETE", `/api/Image`, props);


export type MakeGetAllProps = Omit<GetProps<Make[], unknown, void>, "path">;


export const MakeGetAll = (props: MakeGetAllProps) => (
  <Get<Make[], unknown, void>
    path={`/api/Make`}
    {...props}
  />
);

export type UseMakeGetAllProps = Omit<UseGetProps<Make[], void>, "path">;


export const useMakeGetAll = (props: UseMakeGetAllProps) => useGet<Make[], unknown, void>(`/api/Make`, props);


export type MakePostProps = Omit<MutateProps<Make, unknown, void, Make>, "path" | "verb">;


export const MakePost = (props: MakePostProps) => (
  <Mutate<Make, unknown, void, Make>
    verb="POST"
    path={`/api/Make`}
    {...props}
  />
);

export type UseMakePostProps = Omit<UseMutateProps<Make, void, Make>, "path" | "verb">;


export const useMakePost = (props: UseMakePostProps) => useMutate<Make, unknown, void, Make>("POST", `/api/Make`, props);


export type MakeGetProps = Omit<GetProps<Make, unknown, void>, "path"> & {id: number};


export const MakeGet = ({id, ...props}: MakeGetProps) => (
  <Get<Make, unknown, void>
    path={`/api/Make/${id}`}
    {...props}
  />
);

export type UseMakeGetProps = Omit<UseGetProps<Make, void>, "path"> & {id: number};


export const useMakeGet = ({id, ...props}: UseMakeGetProps) => useGet<Make, unknown, void>(`/api/Make/${id}`, props);


export type MakePutProps = Omit<MutateProps<Make, unknown, void, Make>, "path" | "verb"> & {id: number};


export const MakePut = ({id, ...props}: MakePutProps) => (
  <Mutate<Make, unknown, void, Make>
    verb="PUT"
    path={`/api/Make/${id}`}
    {...props}
  />
);

export type UseMakePutProps = Omit<UseMutateProps<Make, void, Make>, "path" | "verb"> & {id: number};


export const useMakePut = ({id, ...props}: UseMakePutProps) => useMutate<Make, unknown, void, Make>("PUT", `/api/Make/${id}`, props);


export type MakeDeleteProps = Omit<MutateProps<Make, unknown, void, string>, "path" | "verb">;


export const MakeDelete = (props: MakeDeleteProps) => (
  <Mutate<Make, unknown, void, string>
    verb="DELETE"
    path={`/api/Make`}
    {...props}
  />
);

export type UseMakeDeleteProps = Omit<UseMutateProps<Make, void, string>, "path" | "verb">;


export const useMakeDelete = (props: UseMakeDeleteProps) => useMutate<Make, unknown, void, string>("DELETE", `/api/Make`, props);


export type ModelGetProps = Omit<GetProps<Model, unknown, void>, "path">;


export const ModelGet = (props: ModelGetProps) => (
  <Get<Model, unknown, void>
    path={`/api/Model`}
    {...props}
  />
);

export type UseModelGetProps = Omit<UseGetProps<Model, void>, "path">;


export const useModelGet = (props: UseModelGetProps) => useGet<Model, unknown, void>(`/api/Model`, props);


export type ModelPostProps = Omit<MutateProps<Model, unknown, void, Model>, "path" | "verb">;


export const ModelPost = (props: ModelPostProps) => (
  <Mutate<Model, unknown, void, Model>
    verb="POST"
    path={`/api/Model`}
    {...props}
  />
);

export type UseModelPostProps = Omit<UseMutateProps<Model, void, Model>, "path" | "verb">;


export const useModelPost = (props: UseModelPostProps) => useMutate<Model, unknown, void, Model>("POST", `/api/Model`, props);


export type ModelGet2Props = Omit<GetProps<Model, unknown, void>, "path"> & {id: number};


export const ModelGet2 = ({id, ...props}: ModelGet2Props) => (
  <Get<Model, unknown, void>
    path={`/api/Model/${id}`}
    {...props}
  />
);

export type UseModelGet2Props = Omit<UseGetProps<Model, void>, "path"> & {id: number};


export const useModelGet2 = ({id, ...props}: UseModelGet2Props) => useGet<Model, unknown, void>(`/api/Model/${id}`, props);


export type ModelPutProps = Omit<MutateProps<Model, unknown, void, Model>, "path" | "verb"> & {id: number};


export const ModelPut = ({id, ...props}: ModelPutProps) => (
  <Mutate<Model, unknown, void, Model>
    verb="PUT"
    path={`/api/Model/${id}`}
    {...props}
  />
);

export type UseModelPutProps = Omit<UseMutateProps<Model, void, Model>, "path" | "verb"> & {id: number};


export const useModelPut = ({id, ...props}: UseModelPutProps) => useMutate<Model, unknown, void, Model>("PUT", `/api/Model/${id}`, props);


export type ModelDeleteProps = Omit<MutateProps<Model, unknown, void, string>, "path" | "verb">;


export const ModelDelete = (props: ModelDeleteProps) => (
  <Mutate<Model, unknown, void, string>
    verb="DELETE"
    path={`/api/Model`}
    {...props}
  />
);

export type UseModelDeleteProps = Omit<UseMutateProps<Model, void, string>, "path" | "verb">;


export const useModelDelete = (props: UseModelDeleteProps) => useMutate<Model, unknown, void, string>("DELETE", `/api/Model`, props);


export type PartClassGetAllProps = Omit<GetProps<PartClass[], unknown, void>, "path">;


export const PartClassGetAll = (props: PartClassGetAllProps) => (
  <Get<PartClass[], unknown, void>
    path={`/api/PartClass`}
    {...props}
  />
);

export type UsePartClassGetAllProps = Omit<UseGetProps<PartClass[], void>, "path">;


export const usePartClassGetAll = (props: UsePartClassGetAllProps) => useGet<PartClass[], unknown, void>(`/api/PartClass`, props);


export type PartClassPostProps = Omit<MutateProps<PartClass, unknown, void, PartClass>, "path" | "verb">;


export const PartClassPost = (props: PartClassPostProps) => (
  <Mutate<PartClass, unknown, void, PartClass>
    verb="POST"
    path={`/api/PartClass`}
    {...props}
  />
);

export type UsePartClassPostProps = Omit<UseMutateProps<PartClass, void, PartClass>, "path" | "verb">;


export const usePartClassPost = (props: UsePartClassPostProps) => useMutate<PartClass, unknown, void, PartClass>("POST", `/api/PartClass`, props);


export type PartClassGetProps = Omit<GetProps<PartClass, unknown, void>, "path"> & {id: number};


export const PartClassGet = ({id, ...props}: PartClassGetProps) => (
  <Get<PartClass, unknown, void>
    path={`/api/PartClass/${id}`}
    {...props}
  />
);

export type UsePartClassGetProps = Omit<UseGetProps<PartClass, void>, "path"> & {id: number};


export const usePartClassGet = ({id, ...props}: UsePartClassGetProps) => useGet<PartClass, unknown, void>(`/api/PartClass/${id}`, props);


export type PartClassPutProps = Omit<MutateProps<PartClass, unknown, void, PartClass>, "path" | "verb"> & {id: number};


export const PartClassPut = ({id, ...props}: PartClassPutProps) => (
  <Mutate<PartClass, unknown, void, PartClass>
    verb="PUT"
    path={`/api/PartClass/${id}`}
    {...props}
  />
);

export type UsePartClassPutProps = Omit<UseMutateProps<PartClass, void, PartClass>, "path" | "verb"> & {id: number};


export const usePartClassPut = ({id, ...props}: UsePartClassPutProps) => useMutate<PartClass, unknown, void, PartClass>("PUT", `/api/PartClass/${id}`, props);


export type PartClassDeleteProps = Omit<MutateProps<PartClass, unknown, void, string>, "path" | "verb">;


export const PartClassDelete = (props: PartClassDeleteProps) => (
  <Mutate<PartClass, unknown, void, string>
    verb="DELETE"
    path={`/api/PartClass`}
    {...props}
  />
);

export type UsePartClassDeleteProps = Omit<UseMutateProps<PartClass, void, string>, "path" | "verb">;


export const usePartClassDelete = (props: UsePartClassDeleteProps) => useMutate<PartClass, unknown, void, string>("DELETE", `/api/PartClass`, props);


export type PartGetAllProps = Omit<GetProps<Part[], unknown, void>, "path">;


export const PartGetAll = (props: PartGetAllProps) => (
  <Get<Part[], unknown, void>
    path={`/api/Part`}
    {...props}
  />
);

export type UsePartGetAllProps = Omit<UseGetProps<Part[], void>, "path">;


export const usePartGetAll = (props: UsePartGetAllProps) => useGet<Part[], unknown, void>(`/api/Part`, props);


export type PartPostProps = Omit<MutateProps<Part, unknown, void, Part>, "path" | "verb">;


export const PartPost = (props: PartPostProps) => (
  <Mutate<Part, unknown, void, Part>
    verb="POST"
    path={`/api/Part`}
    {...props}
  />
);

export type UsePartPostProps = Omit<UseMutateProps<Part, void, Part>, "path" | "verb">;


export const usePartPost = (props: UsePartPostProps) => useMutate<Part, unknown, void, Part>("POST", `/api/Part`, props);


export type PartGetProps = Omit<GetProps<Part, unknown, void>, "path"> & {id: number};


export const PartGet = ({id, ...props}: PartGetProps) => (
  <Get<Part, unknown, void>
    path={`/api/Part/${id}`}
    {...props}
  />
);

export type UsePartGetProps = Omit<UseGetProps<Part, void>, "path"> & {id: number};


export const usePartGet = ({id, ...props}: UsePartGetProps) => useGet<Part, unknown, void>(`/api/Part/${id}`, props);


export type PartPutProps = Omit<MutateProps<Part, unknown, void, Part>, "path" | "verb"> & {id: number};


export const PartPut = ({id, ...props}: PartPutProps) => (
  <Mutate<Part, unknown, void, Part>
    verb="PUT"
    path={`/api/Part/${id}`}
    {...props}
  />
);

export type UsePartPutProps = Omit<UseMutateProps<Part, void, Part>, "path" | "verb"> & {id: number};


export const usePartPut = ({id, ...props}: UsePartPutProps) => useMutate<Part, unknown, void, Part>("PUT", `/api/Part/${id}`, props);


export type PartDeleteProps = Omit<MutateProps<Part, unknown, void, string>, "path" | "verb">;


export const PartDelete = (props: PartDeleteProps) => (
  <Mutate<Part, unknown, void, string>
    verb="DELETE"
    path={`/api/Part`}
    {...props}
  />
);

export type UsePartDeleteProps = Omit<UseMutateProps<Part, void, string>, "path" | "verb">;


export const usePartDelete = (props: UsePartDeleteProps) => useMutate<Part, unknown, void, string>("DELETE", `/api/Part`, props);


export type SpecificationValueGetAllProps = Omit<GetProps<SpecificationValue[], unknown, void>, "path">;


export const SpecificationValueGetAll = (props: SpecificationValueGetAllProps) => (
  <Get<SpecificationValue[], unknown, void>
    path={`/api/SpecificationValue`}
    {...props}
  />
);

export type UseSpecificationValueGetAllProps = Omit<UseGetProps<SpecificationValue[], void>, "path">;


export const useSpecificationValueGetAll = (props: UseSpecificationValueGetAllProps) => useGet<SpecificationValue[], unknown, void>(`/api/SpecificationValue`, props);


export type SpecificationValuePostProps = Omit<MutateProps<SpecificationValue, unknown, void, SpecificationValue>, "path" | "verb">;


export const SpecificationValuePost = (props: SpecificationValuePostProps) => (
  <Mutate<SpecificationValue, unknown, void, SpecificationValue>
    verb="POST"
    path={`/api/SpecificationValue`}
    {...props}
  />
);

export type UseSpecificationValuePostProps = Omit<UseMutateProps<SpecificationValue, void, SpecificationValue>, "path" | "verb">;


export const useSpecificationValuePost = (props: UseSpecificationValuePostProps) => useMutate<SpecificationValue, unknown, void, SpecificationValue>("POST", `/api/SpecificationValue`, props);


export type SpecificationValueGetProps = Omit<GetProps<SpecificationValue, unknown, void>, "path"> & {id: number};


export const SpecificationValueGet = ({id, ...props}: SpecificationValueGetProps) => (
  <Get<SpecificationValue, unknown, void>
    path={`/api/SpecificationValue/${id}`}
    {...props}
  />
);

export type UseSpecificationValueGetProps = Omit<UseGetProps<SpecificationValue, void>, "path"> & {id: number};


export const useSpecificationValueGet = ({id, ...props}: UseSpecificationValueGetProps) => useGet<SpecificationValue, unknown, void>(`/api/SpecificationValue/${id}`, props);


export type SpecificationValuePutProps = Omit<MutateProps<SpecificationValue, unknown, void, SpecificationValue>, "path" | "verb"> & {id: number};


export const SpecificationValuePut = ({id, ...props}: SpecificationValuePutProps) => (
  <Mutate<SpecificationValue, unknown, void, SpecificationValue>
    verb="PUT"
    path={`/api/SpecificationValue/${id}`}
    {...props}
  />
);

export type UseSpecificationValuePutProps = Omit<UseMutateProps<SpecificationValue, void, SpecificationValue>, "path" | "verb"> & {id: number};


export const useSpecificationValuePut = ({id, ...props}: UseSpecificationValuePutProps) => useMutate<SpecificationValue, unknown, void, SpecificationValue>("PUT", `/api/SpecificationValue/${id}`, props);


export type SpecificationValueDeleteProps = Omit<MutateProps<SpecificationValue, unknown, void, string>, "path" | "verb">;


export const SpecificationValueDelete = (props: SpecificationValueDeleteProps) => (
  <Mutate<SpecificationValue, unknown, void, string>
    verb="DELETE"
    path={`/api/SpecificationValue`}
    {...props}
  />
);

export type UseSpecificationValueDeleteProps = Omit<UseMutateProps<SpecificationValue, void, string>, "path" | "verb">;


export const useSpecificationValueDelete = (props: UseSpecificationValueDeleteProps) => useMutate<SpecificationValue, unknown, void, string>("DELETE", `/api/SpecificationValue`, props);


export type TrimGetAllProps = Omit<GetProps<Trim[], unknown, void>, "path">;


export const TrimGetAll = (props: TrimGetAllProps) => (
  <Get<Trim[], unknown, void>
    path={`/api/Trim`}
    {...props}
  />
);

export type UseTrimGetAllProps = Omit<UseGetProps<Trim[], void>, "path">;


export const useTrimGetAll = (props: UseTrimGetAllProps) => useGet<Trim[], unknown, void>(`/api/Trim`, props);


export type TrimPostProps = Omit<MutateProps<Trim, unknown, void, Trim>, "path" | "verb">;


export const TrimPost = (props: TrimPostProps) => (
  <Mutate<Trim, unknown, void, Trim>
    verb="POST"
    path={`/api/Trim`}
    {...props}
  />
);

export type UseTrimPostProps = Omit<UseMutateProps<Trim, void, Trim>, "path" | "verb">;


export const useTrimPost = (props: UseTrimPostProps) => useMutate<Trim, unknown, void, Trim>("POST", `/api/Trim`, props);


export type TrimGetProps = Omit<GetProps<Trim, unknown, void>, "path"> & {id: number};


export const TrimGet = ({id, ...props}: TrimGetProps) => (
  <Get<Trim, unknown, void>
    path={`/api/Trim/${id}`}
    {...props}
  />
);

export type UseTrimGetProps = Omit<UseGetProps<Trim, void>, "path"> & {id: number};


export const useTrimGet = ({id, ...props}: UseTrimGetProps) => useGet<Trim, unknown, void>(`/api/Trim/${id}`, props);


export type TrimPutProps = Omit<MutateProps<Trim, unknown, void, Trim>, "path" | "verb"> & {id: number};


export const TrimPut = ({id, ...props}: TrimPutProps) => (
  <Mutate<Trim, unknown, void, Trim>
    verb="PUT"
    path={`/api/Trim/${id}`}
    {...props}
  />
);

export type UseTrimPutProps = Omit<UseMutateProps<Trim, void, Trim>, "path" | "verb"> & {id: number};


export const useTrimPut = ({id, ...props}: UseTrimPutProps) => useMutate<Trim, unknown, void, Trim>("PUT", `/api/Trim/${id}`, props);


export type TrimDeleteProps = Omit<MutateProps<Trim, unknown, void, string>, "path" | "verb">;


export const TrimDelete = (props: TrimDeleteProps) => (
  <Mutate<Trim, unknown, void, string>
    verb="DELETE"
    path={`/api/Trim`}
    {...props}
  />
);

export type UseTrimDeleteProps = Omit<UseMutateProps<Trim, void, string>, "path" | "verb">;


export const useTrimDelete = (props: UseTrimDeleteProps) => useMutate<Trim, unknown, void, string>("DELETE", `/api/Trim`, props);


export type UserGetProps = Omit<GetProps<UserInfoModel, unknown, void>, "path">;


export const UserGet = (props: UserGetProps) => (
  <Get<UserInfoModel, unknown, void>
    path={`/api/User`}
    {...props}
  />
);

export type UseUserGetProps = Omit<UseGetProps<UserInfoModel, void>, "path">;


export const useUserGet = (props: UseUserGetProps) => useGet<UserInfoModel, unknown, void>(`/api/User`, props);


export type UserAuthenticateProps = Omit<MutateProps<TokenModel, unknown, void, TokenModel>, "path" | "verb">;


export const UserAuthenticate = (props: UserAuthenticateProps) => (
  <Mutate<TokenModel, unknown, void, TokenModel>
    verb="POST"
    path={`/api/User/authentication`}
    {...props}
  />
);

export type UseUserAuthenticateProps = Omit<UseMutateProps<TokenModel, void, TokenModel>, "path" | "verb">;


export const useUserAuthenticate = (props: UseUserAuthenticateProps) => useMutate<TokenModel, unknown, void, TokenModel>("POST", `/api/User/authentication`, props);


export type UserRegistrateProps = Omit<MutateProps<TokenModel, unknown, void, TokenModel>, "path" | "verb">;


export const UserRegistrate = (props: UserRegistrateProps) => (
  <Mutate<TokenModel, unknown, void, TokenModel>
    verb="POST"
    path={`/api/User/registration`}
    {...props}
  />
);

export type UseUserRegistrateProps = Omit<UseMutateProps<TokenModel, void, TokenModel>, "path" | "verb">;


export const useUserRegistrate = (props: UseUserRegistrateProps) => useMutate<TokenModel, unknown, void, TokenModel>("POST", `/api/User/registration`, props);

